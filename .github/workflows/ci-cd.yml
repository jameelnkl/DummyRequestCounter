name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.12"

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install tooling & deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff mypy bandit pip-audit

      - name: Ruff (lint)
        run: ruff check .

      - name: Mypy (static types)
        run: |
          mypy --install-types --non-interactive --ignore-missing-imports app || true

      - name: Bandit (security scan of Python code)
        run: bandit -q -r app || true

      - name: pip-audit (3rd-party dependency vulnerabilities)
        run: pip-audit || true

  unit-tests:
    name: Unit Tests (pytest)
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps (incl. pytest)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run pytest (unit)
        run: pytest -v

  e2e-test:
    name: Integration / E2E (FastAPI + Redis service)
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Boot FastAPI (background) against Redis service
        env:
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379
          REDIS_DB: 0
        run: |
          nohup python -m uvicorn app.app:app --host 127.0.0.1 --port 8000 >/tmp/uvicorn.log 2>&1 & echo $! > /tmp/uvicorn.pid

      - name: Wait for /health
        run: |
          for i in {1..40}; do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              echo "App is up"; exit 0
            fi
            sleep 1
          done
          echo "App did not become healthy"
          echo "---- Uvicorn log ----"
          cat /tmp/uvicorn.log || true
          exit 1

      - name: Hit endpoints
        run: |
          curl -fsS http://127.0.0.1:8000/
          curl -fsS http://127.0.0.1:8000/docs >/dev/null

      - name: Teardown app
        if: always()
        run: |
          kill $(cat /tmp/uvicorn.pid) 2>/dev/null || true

  docker-build-and-scan:
    name: Build, Run via Compose, Smoke Test & Scan
    runs-on: ubuntu-latest
    needs: e2e-test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compose config sanity
        run: docker compose config

      - name: Build images (Compose)
        run: docker compose build

      - name: Start stack
        env:
          APP_PORT: 8080
        run: docker compose up -d

      - name: Wait for health
        run: |
          for i in {1..50}; do
            if curl -fsS http://localhost:8080/health >/dev/null; then
              echo "Healthy"; exit 0
            fi
            sleep 1
          done
          echo "Service not healthy"
          docker compose logs api || true
          exit 1

      - name: Smoke test container
        run: |
          curl -fsS http://localhost:8080/
          curl -fsS http://localhost:8080/docs >/dev/null

      - name: Stop stack
        if: always()
        run: docker compose down

      - name: Build final image tag (for scanning)
        run: docker build -t dummy-request-counter:ci .

      - name: Trivy (container vulnerability scan)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: dummy-request-counter:ci
          format: table
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
